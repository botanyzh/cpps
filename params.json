{"name":"cpps","tagline":"A (pseudo) interpreter for C++ script","body":"# CPPS - A (Pseudo) Interpreter for C++ Script\r\n\r\nNote: There is also [a Chinese version](https://github.com/duyanning/cpps/blob/master/README.chinese.md).\r\n\r\n## Build & Install\r\n\r\n    mkdir build-cpps\r\n    cd build-cpps\r\n    cmake ../cpps\r\n    make\r\n    make test\r\n    sudo make install\r\n\r\n## Script consisting of only one .cpp file\r\n\r\n    cpps hello.cpp\r\n\r\n## Script consisting of multiple one .cpp files\r\n\r\nSuch as:\r\n* hello.cpp\r\n* foo.cpp\r\n* foo.h\r\n\r\n### If you use a traditional approach such as GCC & Makefile\r\n\r\nYou need add a line such as\r\n\r\n    #include \"foo.h\"\r\n\r\nto `hello.cpp` that calls functions defined in `foo.cpp` and declared in `foo.h`\r\nand then add rules for compiling `foo.cpp` to your Makefile.\r\n\r\n### If you use CPPS\r\n\r\nWhat you need is to add a comment after the `#include \"foo.h\"` directive, such as\r\n\r\n    #include \"foo.h\" // usingcpp\r\n    \r\nand then run the following command:\r\n\r\n    cpps hello.cpp\r\n\r\nNOTE: if your .cpp file has a different name than the corresponding .h file, you should write:\r\n\r\n    #include \"foo.h\" // using fooandbar.cpp\r\n\r\nwhere `fooandbar.cpp` is the file in which the definations of functions declared in foo.h reside.\r\n\r\n## If you use a library in hello.cpp\r\nsuch as pthread\r\n\r\n### If you use a traditional approach such as GCC & Makefile\r\n\r\nYou need write\r\n\r\n    g++ -lpthread hello.cpp -o hello\r\n\r\n### If you ues CPPS\r\n\r\nAll you need to do is adding the following comment to any .cpp file of your script\r\n\r\n    // linklib pthread\r\n\r\n## Request a .h to be precompiled\r\nFor example, if you want to make `std.h` a precompiled header,\r\nall you need to do is adding a comment after the `#include \"std.h\"` directive as following:\r\n\r\n    #include \"std.h\" // precompile\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}